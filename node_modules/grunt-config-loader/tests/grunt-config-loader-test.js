var Grunt = require('grunt');
var should = require('chai').should();

var GruntConfigLoader = require('../index.js');

describe('GruntConfigLoader', function() {
  var grunt = Grunt;

  var configLoader;

  beforeEach(function() {
    configLoader = new GruntConfigLoader(grunt, {
      cwd: 'tests/fixtures/config',
      match: '**/**.js',
      taskName: 'taskName',
      overWrite: false
    });

    grunt.config.data = {};
  });

  describe('#getOptions', function() {
    it('Should always return default options if they are not provided.', function() {
      var configLoader = new GruntConfigLoader(grunt);

      configLoader.getOptions().should.exist;
      configLoader.getOptions().should.not.be.empty;

      configLoader.getOptions().should.have.property('cwd');
      configLoader.getOptions().should.have.property('match');
      configLoader.getOptions().should.have.property('taskName');
      configLoader.getOptions().should.have.property('overWrite');
      configLoader.getOptions().should.have.property('strict');
    });

    it('Should reflect constructor options.', function() {
      var configLoader = new GruntConfigLoader(grunt, {
        cwd: 'pewpewpew',
        match: 'match',
        taskName: 'taskName',
        random: 'random'
      });

      configLoader.getOptions().should.have.property('cwd', 'pewpewpew');
      configLoader.getOptions().should.have.property('match', 'match');
      configLoader.getOptions().should.have.property('taskName', 'taskName');
      configLoader.getOptions().should.have.property('random', 'random');
    });
  });

  describe('#load', function() {
    it('Should throw a exception on loading config(s) that doesn\'t exist.', function() {
      var throwMe = function() {
        configLoader.load('doesnt-exist');
      };

      var throwMeCollection = function() {
        configLoader.load(['ok.js', 'doesnt-exist']);
      };

      throwMe.should.throw('doesnt-exist does not exist.');

      throwMeCollection.should.throw('doesnt-exist does not exist.');
    });

    it('Should throw a exception on loading config(s) with no taskName.', function() {
      var throwMe = function() {
        configLoader.load('bad.js');
      };

      var throwMeCollection = function() {
        configLoader.load(['ok.js', 'bad.js']);
      };

      throwMe.should.throw('bad.js has no assigned task.');

      throwMeCollection.should.throw('bad.js has no assigned task.');
    });

    it('Should not throw an exception on loading config(s) with no taskName if strict is turned off, should skip.', function() {
      configLoader = new GruntConfigLoader(grunt, {
        cwd: 'tests/fixtures/config',
        match: '**/**.js',
        taskName: 'namespace',
        strict: false,
      });

      var dontThrowMe = function() {
        configLoader.load('ok.js');
      };

      dontThrowMe.should.not.throw();
      grunt.config.data.should.be.empty;
    });

    it('Should not throw on a proper config.', function() {
      var dontThrowMe = function() {
        configLoader.load('ok.js');
      };

      var dontThrowMeCollection = function() {
        configLoader.load(['ok.js', 'another-ok.js']);
      };

      dontThrowMe.should.not.throw();

      dontThrowMeCollection.should.not.throw();
    });

    it('Should return self.', function() {
      configLoader.load('ok.js').should.equal(configLoader);
    });

    it('Should register configs that must be evaluated.', function() {
      configLoader.load('evaluated.js');
      
      grunt.config.data.evaluated.should.have.property('grunt', grunt.prototype);
    });

    it('Should register config file with grunt given a string.', function() {
      configLoader.load('ok.js');

      grunt.config.get('foo').should.exist;
      grunt.config.get('foo').should.have.property('foo', 'bar');
    });

    it('Should register config files with grunt given an collection of strings.', function() {
      configLoader.load(['ok.js', 'another-ok.js']);

      grunt.config.get('foo').should.exist;
      grunt.config.get('pew').should.exist;
    });

    it('Should remove taskName key from config.', function() {
      configLoader.load('ok.js');

      configLoader.load(['ok.js', 'another-ok.js']);

      should.not.exist(grunt.config.get('foo').taskName);

      should.not.exist(grunt.config.get('pew').taskName);
    });

    it('Should use cwd to determine load location.', function() {
      var configLoader = new GruntConfigLoader(grunt, {cwd: 'bad'});

      var throwMe = function() {
        configLoader.load('ok.js');
      };

      throwMe.should.throw('ok.js does not exist.');


      configLoader = new GruntConfigLoader(grunt, {cwd: 'tests/fixtures/config/sub'});

      var dontThrowMe = function() {
        configLoader.load('ok.js');
      };

      dontThrowMe.should.not.throw();

      grunt.config.get('ok').should.exist;
    });

    it('Shoud use taskName to determine taskName.', function() {
      var configLoader = new GruntConfigLoader(grunt, {
        taskName: 'blop',
        cwd: 'tests/fixtures/config'
      });

      var throwMe = function() {
        configLoader.load('ok.js');
      };

      throwMe.should.throw('ok.js has no assigned task.');


      configLoader = new GruntConfigLoader(grunt, {
        taskName: 'bad',
        cwd: 'tests/fixtures/config'
      });

      var dontThrowMe = function() {
        configLoader.load('bad.js');
      };

      dontThrowMe.should.not.throw();
    });

    it('Should merge on namespace collision if overWrite is false.', function() {
      configLoader.load(['ok.js', 'ok-fragment.js']);

      grunt.config.get('foo').should.have.keys('foo', 'bar');
    });

    it('Should merge on namespace collision if overWrite is array but doesnt contain namespace.', function() {
      var configLoader = new GruntConfigLoader(grunt, {
        cwd: 'tests/fixtures/config',
        overWrite: ['Needle']
      });
      
      configLoader.load(['ok.js', 'ok-fragment.js']);

      grunt.config.get('foo').should.have.keys('foo', 'bar');
    });

    it('Should merge on namespace collision if overWrite is string but isnt the namespace.', function() {
      var configLoader = new GruntConfigLoader(grunt, {
        cwd: 'tests/fixtures/config',
        overWrite: 'Needle'
      });
      
      configLoader.load(['ok.js', 'ok-fragment.js']);

      grunt.config.get('foo').should.have.keys('foo', 'bar');
    });

    it('Should overwrite on namespace collision if overWrite is true.', function() {
      var configLoader = new GruntConfigLoader(grunt, {
        cwd: 'tests/fixtures/config',
        overWrite: true
      });

      configLoader.load(['ok.js', 'ok-fragment.js']);

      grunt.config.get('foo').should.have.keys('bar');
    });

    it('Should overwrite on namespace collision if overWrite is an array and contains namespace.', function() {
      var configLoader = new GruntConfigLoader(grunt, {
        cwd: 'tests/fixtures/config',
        overWrite: ['foo']
      });

      configLoader.load(['ok.js', 'ok-fragment.js']);

      grunt.config.get('foo').should.have.keys('bar');
    });

    it('Should overwrite on namespace collision if overWrite is a string and is namespace.', function() {
      var configLoader = new GruntConfigLoader(grunt, {
        cwd: 'tests/fixtures/config',
        overWrite: 'foo'
      });

      configLoader.load(['ok.js', 'ok-fragment.js']);

      grunt.config.get('foo').should.have.keys('bar');
    });
  });
  
  describe('#loadAll', function() {
    it('Should load all items based of cwd option.', function() {
      var configLoader = new GruntConfigLoader(grunt, {cwd: 'tests/fixtures/config/sub'});

      configLoader.loadAll();

      grunt.config.data.should.have.keys('pewpew', 'ok');
    });

    it('Should load items based of match.', function() {
      var configLoader = new GruntConfigLoader(grunt, {
        cwd: 'tests/fixtures/config/sub',
        match: ['**/**.js', '!ok.js']
      });

      configLoader.loadAll();

      grunt.config.data.should.have.key('pewpew');
    });
  });

  describe('#export', function() {
    var config = {
      cat: {
        color: 'black',
        name: 'apple'
      }
    };

    grunt.initConfig(config);

    var configLoader = new GruntConfigLoader(grunt);

    configLoader.export().should.equal(config);
  });
});